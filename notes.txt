import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
from pmdarima import auto_arima

# Load your dataset
data = pd.read_csv("your_data.csv")

# Convert 'Close Month' and 'Close Year' to datetime
data['Close Month'] = pd.to_datetime(data['Close Month'].astype(int).astype(str) + '-' + data['Close Year'].astype(int).astype(str), format='%m-%Y')

# Set 'Close Month' as the index
data.set_index('Close Month', inplace=True)

# Recognize current year and month
current_year = data.index[-1].year
current_month = data.index[-1].month

# Filter data for the current year
data_current_year = data[data.index.year == current_year]

# Group by 'BU/COE' and resample to monthly frequency, summing 'Total Incremental Revenue'
data_grouped = data_current_year.groupby('BU/COE')['Total Incremental Revenue'].resample('M').sum().reset_index()

# Loop through each BU/COE
predictions = []
for group, df_group in data_grouped.groupby('BU/COE'):
    # Fit ARIMA model
    model = auto_arima(df_group['Total Incremental Revenue'], seasonal=True, m=12)
    fitted_model = model.fit(df_group['Total Incremental Revenue'])
    
    # Forecast remaining months of the current year
    forecast = fitted_model.predict(n_periods=12 - current_month + 1)
    
    # Append predictions with BU/COE and forecast
    for i, pred in enumerate(forecast):
        month = current_month + i
        year = current_year
        predictions.append({'Close Month': pd.to_datetime(f"{year}-{month}-01", format='%Y-%m-%d'), 'BU/COE': group, 'Total Incremental Revenue': pred})

# Create DataFrame from predictions
predictions_df = pd.DataFrame(predictions)

# Merge predictions with original data
merged_data = pd.merge(data, predictions_df, on=['Close Month', 'BU/COE'], how='left')

# Print merged_data with additional 'Prediction' column
print(merged_data)
